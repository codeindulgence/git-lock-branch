#! /usr/bin/env bash

# Constants
toplevel=$(git rev-parse --show-toplevel)
if [ $? -ne 0 ]; then
  exit 128
fi
precommitfile=$toplevel/.git/hooks/pre-commit

# Parse arguments
parse() {
  [ $# -eq 0 ] && usage
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h|--help) usage ;;
    -l) list ;;
    -u) _UNLOCK=1 ;;
    *) _commands="$_commands $1" ;;
    esac
    shift || true
  done
}

# Print usage
usage() {
  cat >&2 <<EOS
Usage: git lock-branch [options] <branch>
Options:
  -h,--help    Show this help and exit
  -u           Unlock
  -l           List current locks
EOS
  exit 1;
}

# List locked branches
list() {
  git config --get-all branch.lock | sort -u
  exit
}

# If hook script exists make sure it's bash
checkhook() {
  if [ -f "$precommitfile" ]; then
    head -n 1 $precommitfile | grep -q 'bash' || {
      echo Existing pre-commit script does not appear to be bash
      echo Unable to install
      exit 1
    }
  else
    stub
  fi
}

# If there is no existing pre-commit, then create it
stub() {
  echo "#! /usr/bin/env bash" > $precommitfile
  chmod +x $precommitfile
  echo Initialized pre-commit hook
}

# Initialize git-lock
init() {
  checkhook
  grep -q git-lock-branch $precommitfile || {
    cat >> $precommitfile <<EOS

# git-lock-branch
branch=\$(git symbolic-ref --short HEAD)
git config --get-all branch.lock ^\$branch$ >/dev/null && {
  echo "\$branch is locked"
  exit 1
} || {
  exit 0
}
# /git-lock-branch
EOS
    echo Initialized git-lock-branch
  }
}

# Unlock branch
unlock() {
  git config --unset branch.lock $1
  echo "$1 unlocked!"
}

# Lock branch
lock() {
  git config --add branch.lock $1
  echo "$1 locked"
}

# Lock or unlock a branch
run() {
  set -- $_commands

  init

  if [ -n "$_UNLOCK" ]; then
    unlock $1
  else
    lock $1
  fi
}

parse "${@}"
run
